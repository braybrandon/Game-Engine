# .github/workflows/release-please.yml
name: Release Please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4.2.0
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          include-component-in-tag: true

      # Quick visibility into what fired
      - name: Debug release outputs
        run: |
          echo "Common released?      ${{ steps.release.outputs['GameEngine.Common--release_created'] }}"
          echo "Gameplay released?    ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] }}"
          echo "Graphics released?    ${{ steps.release.outputs['GameEngine.Graphics--release_created'] }}"
          echo "Physics released?     ${{ steps.release.outputs['GameEngine.Physics--release_created'] }}"
          echo "IO released?          ${{ steps.release.outputs['GameEngine.IO--release_created'] }}"

      # Set up .NET only if at least one package was released
      - name: Setup .NET SDK
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true'
              || steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true'
              || steps.release.outputs['GameEngine.Graphics--release_created'] == 'true'
              || steps.release.outputs['GameEngine.Physics--release_created'] == 'true'
              || steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          # Auth for GitHub Packages (nuget.pkg.github.com)
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------
      # GameEngine.Common
      # ---------------------------
      - name: Restore Common
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true' }}
        run: dotnet restore GameEngine.Common/GameEngine.Common.csproj

      - name: Build Common
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true' }}
        run: dotnet build GameEngine.Common/GameEngine.Common.csproj -c Release --no-restore

      - name: Pack Common
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true' }}
        run: |
          VER="${{ steps.release.outputs['GameEngine.Common--version'] }}"
          mkdir -p .nupkg
          dotnet pack GameEngine.Common/GameEngine.Common.csproj -c Release -o .nupkg /p:Version="$VER" --no-build

      - name: Push Common to GitHub Packages
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true' }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Common release body with links
        if: ${{ steps.release.outputs['GameEngine.Common--release_created'] == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const release_id  = "${{ steps.release.outputs['GameEngine.Common--id'] }}";
            const release_url = "${{ steps.release.outputs['GameEngine.Common--html_url'] }}";
            const body        = `${{ toJson(steps.release.outputs['GameEngine.Common--body']) }}` || "";
            const pkgName = "GameEngine.Common";
            const pkgUrl  = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
            const lines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              `- [${pkgName}](${pkgUrl})`,
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              `- [View Source Code Assets for this Release](${release_url}#assets)`
            ];
            await github.rest.repos.updateRelease({
              owner, repo, release_id,
              body: (body ? body + "\n\n" : "") + lines.join("\n")
            });

      # ---------------------------
      # GameEngine.Gameplay
      # ---------------------------
      - name: Restore Gameplay
        if: ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true' }}
        run: dotnet restore GameEngine.Gameplay/GameEngine.Gameplay.csproj

      - name: Build Gameplay
        if: ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true' }}
        run: dotnet build GameEngine.Gameplay/GameEngine.Gameplay.csproj -c Release --no-restore

      - name: Pack Gameplay
        if: ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true' }}
        run: |
          VER="${{ steps.release.outputs['GameEngine.Gameplay--version'] }}"
          mkdir -p .nupkg
          dotnet pack GameEngine.Gameplay/GameEngine.Gameplay.csproj -c Release -o .nupkg /p:Version="$VER" --no-build

      - name: Push Gameplay to GitHub Packages
        if: ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true' }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Gameplay release body with links
        if: ${{ steps.release.outputs['GameEngine.Gameplay--release_created'] == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const release_id  = "${{ steps.release.outputs['GameEngine.Gameplay--id'] }}";
            const release_url = "${{ steps.release.outputs['GameEngine.Gameplay--html_url'] }}";
            const body        = `${{ toJson(steps.release.outputs['GameEngine.Gameplay--body']) }}` || "";
            const pkgName = "GameEngine.Gameplay";
            const pkgUrl  = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
            const lines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              `- [${pkgName}](${pkgUrl})`,
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              `- [View Source Code Assets for this Release](${release_url}#assets)`
            ];
            await github.rest.repos.updateRelease({
              owner, repo, release_id,
              body: (body ? body + "\n\n" : "") + lines.join("\n")
            });

      # ---------------------------
      # GameEngine.Graphics
      # ---------------------------
      - name: Restore Graphics
        if: ${{ steps.release.outputs['GameEngine.Graphics--release_created'] == 'true' }}
        run: dotnet restore GameEngine.Graphics/GameEngine.Graphics.csproj

      - name: Build Graphics
        if: ${{ steps.release.outputs['GameEngine.Graphics--release_created'] == 'true' }}
        run: dotnet build GameEngine.Graphics/GameEngine.Graphics.csproj -c Release --no-restore

      - name: Pack Graphics
        if: ${{ steps.release.outputs['GameEngine.Graphics--release_created'] == 'true' }}
        run: |
          VER="${{ steps.release.outputs['GameEngine.Graphics--version'] }}"
          mkdir -p .nupkg
          dotnet pack GameEngine.Graphics/GameEngine.Graphics.csproj -c Release -o .nupkg /p:Version="$VER" --no-build

      - name: Push Graphics to GitHub Packages
        if: ${{ steps.release.outputs['GameEngine.Graphics--release_created'] == 'true' }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Graphics release body with links
        if: ${{ steps.release.outputs['GameEngine.Graphics--release_created'] == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const release_id  = "${{ steps.release.outputs['GameEngine.Graphics--id'] }}";
            const release_url = "${{ steps.release.outputs['GameEngine.Graphics--html_url'] }}";
            const body        = `${{ toJson(steps.release.outputs['GameEngine.Graphics--body']) }}` || "";
            const pkgName = "GameEngine.Graphics";
            const pkgUrl  = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
            const lines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              `- [${pkgName}](${pkgUrl})`,
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              `- [View Source Code Assets for this Release](${release_url}#assets)`
            ];
            await github.rest.repos.updateRelease({
              owner, repo, release_id,
              body: (body ? body + "\n\n" : "") + lines.join("\n")
            });

      # ---------------------------
      # GameEngine.Physics
      # ---------------------------
      - name: Restore Physics
        if: ${{ steps.release.outputs['GameEngine.Physics--release_created'] == 'true' }}
        run: dotnet restore GameEngine.Physics/GameEngine.Physics.csproj

      - name: Build Physics
        if: ${{ steps.release.outputs['GameEngine.Physics--release_created'] == 'true' }}
        run: dotnet build GameEngine.Physics/GameEngine.Physics.csproj -c Release --no-restore

      - name: Pack Physics
        if: ${{ steps.release.outputs['GameEngine.Physics--release_created'] == 'true' }}
        run: |
          VER="${{ steps.release.outputs['GameEngine.Physics--version'] }}"
          mkdir -p .nupkg
          dotnet pack GameEngine.Physics/GameEngine.Physics.csproj -c Release -o .nupkg /p:Version="$VER" --no-build

      - name: Push Physics to GitHub Packages
        if: ${{ steps.release.outputs['GameEngine.Physics--release_created'] == 'true' }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Physics release body with links
        if: ${{ steps.release.outputs['GameEngine.Physics--release_created'] == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const release_id  = "${{ steps.release.outputs['GameEngine.Physics--id'] }}";
            const release_url = "${{ steps.release.outputs['GameEngine.Physics--html_url'] }}";
            const body        = `${{ toJson(steps.release.outputs['GameEngine.Physics--body']) }}` || "";
            const pkgName = "GameEngine.Physics";
            const pkgUrl  = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
            const lines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              `- [${pkgName}](${pkgUrl})`,
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              `- [View Source Code Assets for this Release](${release_url}#assets)`
            ];
            await github.rest.repos.updateRelease({
              owner, repo, release_id,
              body: (body ? body + "\n\n" : "") + lines.join("\n")
            });

      # ---------------------------
      # GameEngine.IO
      # ---------------------------
      - name: Restore IO
        if: ${{ steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        run: dotnet restore GameEngine.IO/GameEngine.IO.csproj

      - name: Build IO
        if: ${{ steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        run: dotnet build GameEngine.IO/GameEngine.IO.csproj -c Release --no-restore

      - name: Pack IO
        if: ${{ steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        run: |
          VER="${{ steps.release.outputs['GameEngine.IO--version'] }}"
          mkdir -p .nupkg
          dotnet pack GameEngine.IO/GameEngine.IO.csproj -c Release -o .nupkg /p:Version="$VER" --no-build

      - name: Push IO to GitHub Packages
        if: ${{ steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update IO release body with links
        if: ${{ steps.release.outputs['GameEngine.IO--release_created'] == 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const release_id  = "${{ steps.release.outputs['GameEngine.IO--id'] }}";
            const release_url = "${{ steps.release.outputs['GameEngine.IO--html_url'] }}";
            const body        = `${{ toJson(steps.release.outputs['GameEngine.IO--body']) }}` || "";
            const pkgName = "GameEngine.IO";
            const pkgUrl  = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
            const lines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              `- [${pkgName}](${pkgUrl})`,
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              `- [View Source Code Assets for this Release](${release_url}#assets)`
            ];
            await github.rest.repos.updateRelease({
              owner, repo, release_id,
              body: (body ? body + "\n\n" : "") + lines.join("\n")
            })

      # ---------------------------
      # Consolidated "index" releases per component
      # Recreate (delete + create) each <component>-index at the very end so
      # all consolidated releases appear first on the Releases page.
      # ---------------------------
    # .github/workflows/release-index.yml
    name: Build Consolidated Release Indexes

    on:
      workflow_run:
        workflows: ["Release Please"]
        types: [completed]

    permissions:
      contents: write

    concurrency:
      group: release-index-${{ github.ref }}
      cancel-in-progress: false

    jobs:
      build-index:
        if: ${{ github.event.workflow_run.conclusion == 'success' }}
        runs-on: ubuntu-latest
        steps:
          - name: Checkout (shallow is fine)
            uses: actions/checkout@v4
            with:
              fetch-depth: 1

          - name: Create/refresh consolidated releases
            uses: actions/github-script@v7
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const owner = context.repo.owner;
                const repo  = context.repo.repo;

                const components = {
                  common:   "GameEngine.Common",
                  gameplay: "GameEngine.Gameplay",
                  graphics: "GameEngine.Graphics",
                  physics:  "GameEngine.Physics",
                  io:       "GameEngine.IO"
                };

                const { data: repoData } = await github.rest.repos.get({ owner, repo });
                const defaultBranch = repoData.default_branch || "master";

                const releases = await github.paginate(github.rest.repos.listReleases, {
                  owner, repo, per_page: 100
                });

                function byTimeDesc(a, b) {
                  const ta = new Date(a.published_at || a.created_at || 0).getTime();
                  const tb = new Date(b.published_at || b.created_at || 0).getTime();
                  return tb - ta;
                }

                for (const [component, pkgName] of Object.entries(components)) {
                  const verPrefix = `${component}-v`;
                  const indexTag  = `${component}-index`;

                  const compReleases = releases
                    .filter(r => r.tag_name?.startsWith(verPrefix))
                    .sort(byTimeDesc);

                  if (compReleases.length === 0) continue;

                  const latest = compReleases[0];
                  const pkgUrl = `https://github.com/${owner}/${repo}/pkgs/nuget/${pkgName}`;
                  const iso = (d) => (d ? new Date(d).toISOString().slice(0,10) : "");
                  const EXCERPT_LINES = 20;

                  let body = `${component} — consolidated releases\n\n`;
                  body += `**Latest:** [${latest.tag_name}](${latest.html_url}) · ${iso(latest.published_at)}\n\n`;
                  body += `**Package:** [${pkgName}](${pkgUrl})\n\n`;
                  body += `---\n\n## History\n`;
                  for (const r of compReleases) {
                    const excerpt = (r.body || "").split('\n').slice(0, EXCERPT_LINES).join('\n');
                    body += `### [${r.tag_name}](${r.html_url}) — ${iso(r.published_at)}\n${excerpt}\n\n`;
                  }

                  // Delete old index release (if any)
                  const existing = releases.find(r => r.tag_name === indexTag);
                  if (existing) {
                    try {
                      await github.rest.repos.deleteRelease({ owner, repo, release_id: existing.id });
                    } catch { /* ignore */ }
                  }

                  // Delete old tag (if any) so the new tag timestamp is newest
                  try {
                    await github.rest.git.deleteRef({ owner, repo, ref: `tags/${indexTag}` });
                  } catch { /* ignore if not found */ }

                  // Recreate tag at default branch HEAD by creating the release with target_commitish
                  await github.rest.repos.createRelease({
                    owner, repo,
                    tag_name: indexTag,
                    name: `${component}: consolidated releases (latest ${latest.tag_name})`,
                    body,
                    target_commitish: defaultBranch,
                    draft: false,
                    prerelease: false,
                    make_latest: "false"   // don't steal the global "Latest" badge
                  });
                }
