# .github/workflows/release-please.yml
name: Release Please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write # Crucial for GitHub Packages

jobs:
  release-please:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Release Please
        uses: googleapis/release-please-action@v4.2.0
        id: release # <--- Keep this ID, we'll use its outputs
        with:
          config-file: .release-please-config.json # <--- Ensure the dot is there if file is in root
          manifest-file: .release-please-manifest.json # <--- Ensure the dot is there if file is in root

      # --- GitHub Packages Publishing Steps (Conditional) ---
      - name: Setup .NET SDK
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Specify your .NET SDK version
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Corrected env var name

      - name: Restore dependencies
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet restore GameEngine.sln # Restore the entire solution

      - name: Build Solution
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet build GameEngine.sln --configuration Release --no-restore

      - name: Pack All NuGet packages with Release Version # <--- NAME CHANGED FOR CLARITY
        if: ${{ steps.release.outputs.release_created }}
        run: |
          # Get the version from release-please output
          RELEASE_VERSION="${{ steps.release.outputs.version }}"
          echo "Packing NuGet packages with version: $RELEASE_VERSION"
          # Pack all packable projects in the solution, overriding the version
          dotnet pack GameEngine.sln --configuration Release --output .nupkg /p:Version=$RELEASE_VERSION --no-build # <--- CRITICAL CHANGE HERE
        # This will create a .nupkg file for each project with IsPackable=true

      - name: Push All NuGet packages to GitHub Packages
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate

       # --- Corrected Upload Individual NuGet Packages to GitHub Release ---
      - name: Upload Individual NuGet Packages to GitHub Release
        if: ${{ steps.release.outputs.release_created }}
        run: |
          # Ensure the .nupkg directory exists and contains files
          ls -l ./.nupkg/
          
          # Get the upload URL from release-please output
          UPLOAD_URL="${{ steps.release.outputs.upload_url }}"
          
          # Loop through each .nupkg file and upload it
          for file in ./.nupkg/*.nupkg; do
            if [ -f "$file" ]; then # Check if the file actually exists
              ASSET_NAME=$(basename "$file")
              echo "Uploading $ASSET_NAME to release assets..."
              
              curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${{ steps.release.outputs.upload_url }}?name=$ASSET_NAME"
              
              # Add -v for verbose output to debug if it fails again
              # curl -v -X POST ...
              
              echo "Finished uploading $ASSET_NAME."
            else
              echo "Warning: No .nupkg files found in ./.nupkg/"
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure token is available for curl