# .github/workflows/release-please.yml
name: Release Please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write

jobs:
  release-please:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Release Please
        uses: googleapis/release-please-action@v4.2.0
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Setup .NET SDK
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # âœ… Restore ONLY the library projects (do NOT restore the .sln)
      - name: Restore libraries
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        run: |
          set -e
          declare -a PROJECTS=(
            "GameEngine.Common/GameEngine.Common.csproj"
            "GameEngine.Engine/GameEngine.Engine.csproj"
            "GameEngine.Graphics/GameEngine.Graphics.csproj"
            "GameEngine.Physics/GameEngine.Physics.csproj"
            "GameEngine.IO/GameEngine.IO.csproj"
          )
          for PROJ in "${PROJECTS[@]}"; do
            echo "Restoring $PROJ"
            dotnet restore "$PROJ"
          done

      # âœ… Build ONLY the library projects
      - name: Build libraries
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        run: |
          set -e
          declare -a PROJECTS=(
            "GameEngine.Common/GameEngine.Common.csproj"
            "GameEngine.Engine/GameEngine.Engine.csproj"
            "GameEngine.Graphics/GameEngine.Graphics.csproj"
            "GameEngine.Physics/GameEngine.Physics.csproj"
            "GameEngine.IO/GameEngine.IO.csproj"
          )
          for PROJ in "${PROJECTS[@]}"; do
            echo "Building $PROJ"
            dotnet build "$PROJ" -c Release --no-restore
          done

      # ðŸš« Pack only libraries (not the solution)
      - name: Pack NuGet (libraries only)
        if: ${{ steps.release.outputs.release_created }}
        shell: bash
        run: |
          set -e
          RELEASE_VERSION="${{ steps.release.outputs.version }}"
          echo "Packing libraries with version: $RELEASE_VERSION"

          declare -a PROJECTS=(
            "GameEngine.Common/GameEngine.Common.csproj"
            "GameEngine.Engine/GameEngine.Engine.csproj"
            "GameEngine.Graphics/GameEngine.Graphics.csproj"
            "GameEngine.Physics/GameEngine.Physics.csproj"
            "GameEngine.IO/GameEngine.IO.csproj"
          )

          mkdir -p .nupkg
          for PROJ in "${PROJECTS[@]}"; do
            echo "Packing $PROJ"
            dotnet pack "$PROJ" -c Release -o .nupkg /p:Version="$RELEASE_VERSION" --no-build
          done

      - name: Push NuGet packages to GitHub Packages
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet nuget push .nupkg/*.nupkg --api-key "$GITHUB_TOKEN" --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Release Description with Links
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/github-script@v7
        env:
          RELEASE_BODY: ${{ toJson(steps.release.outputs.body) }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseId = "${{ steps.release.outputs.id }}";
            const releaseHtmlUrl = "${{ steps.release.outputs.html_url }}";
            const currentBody = JSON.parse(process.env.RELEASE_BODY || '""');

            const REPO_OWNER = context.repo.owner;
            const REPO_NAME = context.repo.repo;

            const footerLines = [
              "## Package Links",
              "",
              "**GitHub Packages:**",
              "",
              "- [GameEngine.Common](https://github.com/" + REPO_OWNER + "/" + REPO_NAME + "/pkgs/nuget/GameEngine.Common)",
              "- [GameEngine.Engine](https://github.com/" + REPO_OWNER + "/" + REPO_NAME + "/pkgs/nuget/GameEngine.Engine)",
              "- [GameEngine.Graphics](https://github.com/" + REPO_OWNER + "/" + REPO_NAME + "/pkgs/nuget/GameEngine.Graphics)",
              "- [GameEngine.Physics](https://github.com/" + REPO_OWNER + "/" + REPO_NAME + "/pkgs/nuget/GameEngine.Physics)",
              "- [GameEngine.IO](https://github.com/" + REPO_OWNER + "/" + REPO_NAME + "/pkgs/nuget/GameEngine.IO)",
              "",
              "**Direct Downloads (Release Assets):**",
              "",
              "- [View Source Code Assets for this Release](" + releaseHtmlUrl + "#assets)"
            ];

            const footerContent = footerLines.join('\n');
            const newBody = (currentBody || "") + '\n\n' + footerContent;

            console.log("Updating release with new body...");
            try {
              await github.rest.repos.updateRelease({
                owner: REPO_OWNER,
                repo: REPO_NAME,
                release_id: releaseId,
                body: newBody
              });
              console.log(`Successfully updated release ${releaseId}.`);
            } catch (error) {
              core.setFailed(`Failed to update release: ${error.message}`);
            }
