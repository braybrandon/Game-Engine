# .github/workflows/release-please.yml
name: Release Please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write
  issues: write
  packages: write
  release: write # <--- CRITICAL: This is needed for uploading assets

jobs:
  release-please:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Release Please
        uses: googleapis/release-please-action@v4.2.0
        id: release
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Setup .NET SDK
        if: ${{ steps.release.outputs.release_created }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore dependencies
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet restore GameEngine.sln

      - name: Build Solution
        if: ${{ steps.release.outputs.release_created }}
        run: dotnet build GameEngine.sln --configuration Release --no-restore

      - name: Pack All NuGet packages with Release Version
        if: ${{ steps.release.outputs.release_created }}
        run: |
          RELEASE_VERSION="${{ steps.release.outputs.version }}"
          echo "Packing NuGet packages with version: $RELEASE_VERSION"
          dotnet pack GameEngine.sln --configuration Release --output .nupkg /p:Version=$RELEASE_VERSION --no-build

      - name: Push All NuGet packages to GitHub Packages
        if: ${{ steps.outputs.release_created }} # Use outputs from release step
        run: dotnet nuget push .nupkg/*.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate

      # --- NEW DEFINITIVE STEP: Upload Individual NuGet Packages using actions/github-script ---
      - name: Upload Individual NuGet Packages to GitHub Release
        if: ${{ steps.release.outputs.release_created }} # Only run if a release was created
        uses: actions/github-script@v7 # Use a recent version of github-script
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get the release ID from the release-please output
            // The `upload_url` from release-please includes the release ID
            const uploadUrl = "${{ steps.release.outputs.upload_url }}";
            const releaseId = uploadUrl.match(/\/releases\/(\d+)\/assets/)[1]; // Extract ID from URL
            
            const nupkgDir = './.nupkg';
            const files = fs.readdirSync(nupkgDir).filter(f => f.endsWith('.nupkg'));
            
            console.log(`Found ${files.length} .nupkg files to upload.`);
            
            for (const file of files) {
              const filePath = path.join(nupkgDir, file);
              const assetName = file; // Use the filename as the asset name
              const assetContentType = 'application/zip'; // .nupkg files are zip archives
              
              console.log(`Attempting to upload ${assetName} from ${filePath}...`);
              
              const fileContent = fs.readFileSync(filePath);
              
              try {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: releaseId, // Use the extracted release ID
                  name: assetName,
                  data: fileContent,
                  headers: {
                    'content-type': assetContentType,
                    'content-length': fileContent.length // Required for binary uploads
                  }
                });
                console.log(`Successfully uploaded ${assetName}.`);
              } catch (error) {
                console.error(`Failed to upload ${assetName}: ${error.message}`);
                core.setFailed(`Failed to upload ${assetName}: ${error.message}`); // Fail the step
              }
            }
          github-token: ${{ secrets.GITHUB_TOKEN }} # Provide the token to the script